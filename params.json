{"name":"Monero Examples","tagline":"python-json-rpc","body":"# Example usage of json-rpc in Python for Monero\r\n\r\nMonero is a secure, private, untraceable cryptocurrency. For more information or questions,\r\nplease go to [getmonero.org](https://getmonero.org) and\r\n[r/Monero](https://www.reddit.com/r/Monero), respectively.\r\n\r\nThe two main components of monero are `simplewallet` and `bitmonerod`. The first one\r\nis the wallet, as the name suggest. The second one is monero deamon, which is responsbile\r\nfor interacting with monero blockchain.\r\n\r\nMost important functions of Monero's `simplewallet` and\r\n`bitmonreod` can be executed by means of JavaScript Object Notation Remote Procedure Calls ([json-rpc](https://en.wikipedia.org/wiki/JSON-RPC)).\r\n\r\nUsing these procedures, other applications can be developed\r\non top of the `simplewallet` and `bitmonerod`. For examples, a GUI wallet,\r\nan web applications allowing for accessing wallet balance\r\nonline, and block explorer.\r\n\r\nSince there seem to be no tutorials and/or examples of how\r\nto use json-rpc to interact with both `bitmonerod` and `simplewallet`,\r\n the following examples in Python were created. Hopefully, they will allow others to start developing some python\r\nprograms on top of Monero.\r\n\r\n## simplewallet\r\nThe examples demonstrate how to call the most popular procedures\r\nthat `simplewallet` exposes for other applications to use, such as:\r\n\r\n - getbalance\r\n - query_key\r\n - get_payments\r\n - getaddress\r\n - incoming_transfers\r\n - transfer\r\n\r\nThe basic documentaion of the procedures can be found\r\n[here](https://getmonero.org/knowledge-base/developer-guides/wallet-rpc).\r\n\r\n**Prerequsits**\r\n\r\nBefore executing this code make sure that `simplewallet` is\r\nrunning and listening for the incoming rpc calls. For example, you can run the `simplewallet `in rpc mode as follows:\r\n```\r\n/opt/bitmonero/simplewallet --wallet-file ~/wallet.bin --password <wallet_password> --rpc-bind-port 18082\r\n```\r\n\r\nThe code was written, tested and executed on Ubuntu 15.10 with\r\nPython 3.4.3 and requires the [Requests package](https://pypi.python.org/pypi/requests).\r\n\r\n**Basic example 1: get wallet balance**\r\n```python\r\nimport requests\r\nimport json\r\n\r\ndef main():\r\n\r\n    # simple wallet is running on the localhost and port of 18082\r\n    url = \"http://localhost:18082/json_rpc\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    # simplewallet' procedure/method to call\r\n    rpc_input = {\r\n           \"method\": \"getbalance\"\r\n    }\r\n\r\n    # add standard rpc values\r\n    rpc_input.update({\"jsonrpc\": \"2.0\", \"id\": \"0\"})\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n        url,\r\n        data=json.dumps(rpc_input),\r\n        headers=headers)\r\n\r\n    # amounts in cryptonote are encoded in a way which is convenient\r\n    # for a computer, not a user. Thus, its better need to recode them\r\n    # to something user friendly, before displaying them.\r\n    #\r\n    # For examples:\r\n    # 4760000000000 is 4.76\r\n    # 80000000000   is 0.08\r\n    #\r\n    # In example 3 \"Basic example 3: get incoming transfers\" it is\r\n    # shown how to convert cryptonote values to user friendly format.\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response.json(), indent=4))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nGenerated output:\r\n```python\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"0\",\r\n    \"result\": {\r\n        \"unlocked_balance\": 4760000000000,\r\n        \"balance\": 4760000000000\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n**Basic example 2: get a payment information having payment id**\r\n```python\r\nimport requests\r\nimport json\r\n\r\ndef main():\r\n\r\n    # simple wallet is running on the localhost and port of 18082\r\n    url = \"http://localhost:18082/json_rpc\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    # an example of a payment id\r\n    payment_id = \"426870cb29c598e191184fa87003ca562d9e25f761ee9e520a888aec95195912\"\r\n\r\n    # simplewallet' procedure/method to call\r\n    rpc_input = {\r\n        \"method\": \"get_payments\",\r\n        \"params\": {\"payment_id\": payment_id}\r\n    }\r\n\r\n    # add standard rpc values\r\n    rpc_input.update({\"jsonrpc\": \"2.0\", \"id\": \"0\"})\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n        url,\r\n        data=json.dumps(rpc_input),\r\n        headers=headers)\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response.json(), indent=4))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nGenerated output:\r\n```python\r\n{\r\n    \"result\": {\r\n        \"payments\": [\r\n            {\r\n                \"tx_hash\": \"66040ad29f0d780b4d47641a67f410c28cce575b5324c43b784bb376f4e30577\",\r\n                \"amount\": 4800000000000,\r\n                \"block_height\": 795523,\r\n                \"payment_id\": \"426870cb29c598e191184fa87003ca562d9e25f761ee9e520a888aec95195912\",\r\n                \"unlock_time\": 0\r\n            }\r\n        ]\r\n    },\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"0\"\r\n}\r\n```\r\n\r\n\r\n\r\n**Basic example 3: get incoming transfers**\r\n\r\n```python\r\nimport requests\r\nimport json\r\n\r\ndef main():\r\n\r\n    # simple wallet is running on the localhost and port of 18082\r\n    url = \"http://localhost:18082/json_rpc\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    # simplewallet' procedure/method to call\r\n    rpc_input = {\r\n            \"method\": \"incoming_transfers\",\r\n            \"params\": {\"transfer_type\": \"all\"}\r\n    }\r\n\r\n    # add standard rpc values\r\n    rpc_input.update({\"jsonrpc\": \"2.0\", \"id\": \"0\"})\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n         url,\r\n         data=json.dumps(rpc_input),\r\n         headers=headers)\r\n\r\n    # make json dict with response\r\n    response_json = response.json()\r\n\r\n    # amounts in cryptonote are encoded in a way which is convenient\r\n    # for a computer, not a user. Thus, its better need to recode them\r\n    # to something user friendly, before displaying them.\r\n    #\r\n    # For examples:\r\n    # 4760000000000 is 4.76\r\n    # 80000000000   is 0.08\r\n    #\r\n    if \"result\" in response_json:\r\n        if \"transfers\" in response_json[\"result\"]:\r\n            for transfer in response_json[\"result\"][\"transfers\"]:\r\n                transfer[\"amount\"] = float(get_money(str(transfer[\"amount\"])))\r\n\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response_json, indent=4))\r\n\r\ndef get_money(amount):\r\n    \"\"\"decode cryptonote amount format to user friendly format. Hope its correct.\r\n\r\n    Based on C++ code:\r\n    https://github.com/monero-project/bitmonero/blob/master/src/cryptonote_core/cryptonote_format_utils.cpp#L751\r\n    \"\"\"\r\n\r\n    CRYPTONOTE_DISPLAY_DECIMAL_POINT = 12\r\n\r\n    s = amount\r\n\r\n    if len(s) < CRYPTONOTE_DISPLAY_DECIMAL_POINT + 1:\r\n        # add some trailing zeros, if needed, to have constant width\r\n        s = '0' * (CRYPTONOTE_DISPLAY_DECIMAL_POINT + 1 - len(s)) + s\r\n\r\n    idx = len(s) - CRYPTONOTE_DISPLAY_DECIMAL_POINT\r\n\r\n    s = s[0:idx] + \".\" + s[idx:]\r\n\r\n    return s\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nGenerated output:\r\n```python\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"result\": {\r\n        \"transfers\": [\r\n            {\r\n                \"tx_hash\": \"<66040ad29f0d780b4d47641a67f410c28cce575b5324c43b784bb376f4e30577>\",\r\n                \"tx_size\": 521,\r\n                \"spent\": true,\r\n                \"global_index\": 346865,\r\n                \"amount\": 0.8\r\n            },\r\n            {\r\n                \"tx_hash\": \"<66040ad29f0d780b4d47641a67f410c28cce575b5324c43b784bb376f4e30577>\",\r\n                \"tx_size\": 521,\r\n                \"spent\": true,\r\n                \"global_index\": 177947,\r\n                \"amount\": 4.0\r\n            },\r\n            {\r\n                \"tx_hash\": \"<79e7eb67b7022a21505fa034388b5e3b29e1ce639d6dec37347fefa612117ce9>\",\r\n                \"tx_size\": 562,\r\n                \"spent\": false,\r\n                \"global_index\": 165782,\r\n                \"amount\": 0.08\r\n            },\r\n            {\r\n                \"tx_hash\": \"<79e7eb67b7022a21505fa034388b5e3b29e1ce639d6dec37347fefa612117ce9>\",\r\n                \"tx_size\": 562,\r\n                \"spent\": false,\r\n                \"global_index\": 300597,\r\n                \"amount\": 0.9\r\n            },\r\n            {\r\n                \"tx_hash\": \"<79e7eb67b7022a21505fa034388b5e3b29e1ce639d6dec37347fefa612117ce9>\",\r\n                \"tx_size\": 562,\r\n                \"spent\": false,\r\n                \"global_index\": 214803,\r\n                \"amount\": 3.0\r\n            },\r\n            {\r\n                \"tx_hash\": \"<e8409a93edeed9f6c67e6716bb180d9593e8beafa63d51facf68bee233bf694d>\",\r\n                \"tx_size\": 525,\r\n                \"spent\": false,\r\n                \"global_index\": 165783,\r\n                \"amount\": 0.08\r\n            },\r\n            {\r\n                \"tx_hash\": \"<e8409a93edeed9f6c67e6716bb180d9593e8beafa63d51facf68bee233bf694d>\",\r\n                \"tx_size\": 525,\r\n                \"spent\": false,\r\n                \"global_index\": 375952,\r\n                \"amount\": 0.7\r\n            }\r\n        ]\r\n    },\r\n    \"id\": \"0\"\r\n}\r\n```\r\n\r\n**Basic example 4: make a transaction**\r\n```python\r\nimport requests\r\nimport json\r\nimport os\r\nimport binascii\r\n\r\n\r\ndef main():\r\n    \"\"\"DONT RUN IT without changing the destination address!!!\"\"\"\r\n\r\n    # simple wallet is running on the localhost and port of 18082\r\n    url = \"http://localhost:18082/json_rpc\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    destination_address = \"489MAxaT7xXP3Etjk2suJT1uDYZU6cqFycsau2ynCTBacncWVEwe9eYFrAD6BqTn4Y2KMs7maX75iX1UFwnJNG5G88wxKoj\"\r\n\r\n\r\n    # amount of xmr to send\r\n    amount = 0.54321\r\n\r\n    # cryptonote amount format is different then\r\n    # that normally used by people.\r\n    # thus the float amount must be changed to\r\n    # something that cryptonote understands\r\n    int_amount = int(get_amount(amount))\r\n\r\n    # just to make sure that amount->coversion->back\r\n    # gives the same amount as in the initial number\r\n    assert amount == float(get_money(str(int_amount))), \"Amount conversion failed\"\r\n\r\n    # send specified xmr amount to the given destination_address\r\n    recipents = [{\"address\": destination_address,\r\n                  \"amount\": int_amount}]\r\n\r\n    # using given mixin\r\n    mixin = 4\r\n\r\n    # get some random payment_id\r\n    payment_id = get_payment_id()\r\n\r\n    # simplewallet' procedure/method to call\r\n    rpc_input = {\r\n        \"method\": \"transfer\",\r\n        \"params\": {\"destinations\": recipents,\r\n                   \"mixin\": mixin,\r\n                   \"payment_id\" : payment_id}\r\n    }\r\n\r\n    # add standard rpc values\r\n    rpc_input.update({\"jsonrpc\": \"2.0\", \"id\": \"0\"})\r\n\r\n    print(json.dumps(rpc_input))\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n         url,\r\n         data=json.dumps(rpc_input),\r\n         headers=headers)\r\n\r\n    # print the payment_id\r\n    print(\"#payment_id: \", payment_id)\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response.json(), indent=4))\r\n\r\n\r\ndef get_amount(amount):\r\n    \"\"\"encode amount (float number) to the cryptonote format. Hope its correct.\r\n\r\n    Based on C++ code:\r\n    https://github.com/monero-project/bitmonero/blob/master/src/cryptonote_core/cryptonote_format_utils.cpp#L211\r\n    \"\"\"\r\n\r\n    CRYPTONOTE_DISPLAY_DECIMAL_POINT = 12\r\n\r\n    str_amount = str(amount)\r\n\r\n    fraction_size = 0\r\n\r\n    if '.' in str_amount:\r\n\r\n        point_index = str_amount.index('.')\r\n\r\n        fraction_size = len(str_amount) - point_index - 1\r\n\r\n        while fraction_size < CRYPTONOTE_DISPLAY_DECIMAL_POINT and '0' == str_amount[-1]:\r\n            print(44)\r\n            str_amount = str_amount[:-1]\r\n            fraction_size = fraction_size - 1\r\n\r\n        if CRYPTONOTE_DISPLAY_DECIMAL_POINT < fraction_size:\r\n            return False\r\n\r\n        str_amount = str_amount[:point_index] + str_amount[point_index+1:]\r\n\r\n    if not str_amount:\r\n        return False\r\n\r\n    if fraction_size < CRYPTONOTE_DISPLAY_DECIMAL_POINT:\r\n        str_amount = str_amount + '0'*(CRYPTONOTE_DISPLAY_DECIMAL_POINT - fraction_size)\r\n\r\n    return str_amount\r\n\r\n\r\ndef get_money(amount):\r\n    \"\"\"decode cryptonote amount format to user friendly format. Hope its correct.\r\n\r\n    Based on C++ code:\r\n    https://github.com/monero-project/bitmonero/blob/master/src/cryptonote_core/cryptonote_format_utils.cpp#L751\r\n    \"\"\"\r\n\r\n    CRYPTONOTE_DISPLAY_DECIMAL_POINT = 12\r\n\r\n    s = amount\r\n\r\n    if len(s) < CRYPTONOTE_DISPLAY_DECIMAL_POINT + 1:\r\n        # add some trailing zeros, if needed, to have constant width\r\n        s = '0' * (CRYPTONOTE_DISPLAY_DECIMAL_POINT + 1 - len(s)) + s\r\n\r\n    idx = len(s) - CRYPTONOTE_DISPLAY_DECIMAL_POINT\r\n\r\n    s = s[0:idx] + \".\" + s[idx:]\r\n\r\n    return s\r\n\r\ndef get_payment_id():\r\n    \"\"\"generate random payment_id\r\n\r\n    generate some random payment_id for the\r\n    transactions\r\n\r\n    payment_id is 32 bytes (64 hexadecimal characters)\r\n    thus we first generate 32 random byte array\r\n    which is then change to string representation, since\r\n    json will not not what to do with the byte array.\r\n    \"\"\"\r\n\r\n    random_32_bytes = os.urandom(32)\r\n    payment_id = \"\".join(map(chr, binascii.hexlify(random_32_bytes)))\r\n\r\n    return payment_id\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nGenerated output:\r\n\r\n```python\r\n#payment_id:  4926869b6b5d50b24cb59f08fd76826cacdf76201b2d4648578fe610af7f786e\r\n{\r\n    \"id\": \"0\",\r\n    \"jsonrpc\": \"2.0\",\r\n    \"result\": {\r\n        \"tx_key\": \"\",\r\n        \"tx_hash\": \"<04764ab4855b8a9f9c42d99e19e1c40956a502260123521ca3f6488dd809797a>\"\r\n    }\r\n}\r\n```\r\n\r\nOther examples are [here](https://github.com/moneroexamples/python-json-rpc/blob/master/src/simplewallet_rpc_examples.py)\r\n\r\n## bitmonreod\r\n\r\nThe baisc `bitmonerod` rpc calls are as follows:\r\n\r\n - getheight\r\n - query_key\r\n - mining_status\r\n - getlastblockheader\r\n - getblockheaderbyhash\r\n - getblockheaderbyheight\r\n - getblock\r\n - get_info\r\n - get_connections\r\n\r\n**Prerequsits**\r\nBefore executing this code make sure that `bitmonerod` is running.\r\nJust like before, the code was written, tested and executed on Ubuntu 15.10 with\r\nPython 3.4.3 and it requires the [Requests package](https://pypi.python.org/pypi/requests).\r\n\r\n\r\n**Basic example 1: get a mining status**\r\n```python\r\nimport requests\r\nimport json\r\n\r\ndef main():\r\n\r\n    # bitmonerod' is running on the localhost and port of 18081\r\n    url = \"http://localhost:18081/mining_status\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n        url,\r\n        headers=headers)\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response.json(), indent=4))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\nGenerated output:\r\n\r\n```python\r\n{\r\n    \"status\": \"OK\",\r\n    \"threads_count\": 2,\r\n    \"speed\": 117,\r\n    \"active\": true,\r\n    \"address\": \"48daf1rG3hE1Txapcsxh6WXNe9MLNKtu7W7tKTivtSoVLHErYzvdcpea2nSTgGkz66RFP4GKVAsTV14v6G3oddBTHfxP6tU\"\r\n}\r\n```\r\n\r\n\r\n**Basic example 2: get block header having a block hash**\r\n```python\r\nimport requests\r\nimport json\r\n\r\ndef main():\r\n\r\n    # bitmonerod is running on the localhost and port of 18081\r\n    url = \"http://localhost:18081/json_rpc\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    # the block to get\r\n    block_hash = 'd78e2d024532d8d8f9c777e2572623fd0f229d72d9c9c9da3e7cb841a3cb73c6'\r\n\r\n    # bitmonerod' procedure/method to call\r\n    rpc_input = {\r\n           \"method\": \"getblockheaderbyhash\",\r\n           \"params\": {\"hash\": block_hash}\r\n    }\r\n\r\n    # add standard rpc values\r\n    rpc_input.update({\"jsonrpc\": \"2.0\", \"id\": \"0\"})\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n        url,\r\n        data=json.dumps(rpc_input),\r\n        headers=headers)\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response.json(), indent=4))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nGenerated output:\r\n```python\r\n{\r\n    \"result\": {\r\n        \"status\": \"OK\",\r\n        \"block_header\": {\r\n            \"difficulty\": 756932534,\r\n            \"height\": 796743,\r\n            \"nonce\": 8389,\r\n            \"depth\": 46,\r\n            \"orphan_status\": false,\r\n            \"hash\": \"d78e2d024532d8d8f9c777e2572623fd0f229d72d9c9c9da3e7cb841a3cb73c6\",\r\n            \"timestamp\": 1445741816,\r\n            \"major_version\": 1,\r\n            \"minor_version\": 0,\r\n            \"prev_hash\": \"dff9c6299c84f945fabde9e96afa5d44f3c8fa88835fb87a965259c46694a2cd\",\r\n            \"reward\": 8349972377827\r\n        }\r\n    },\r\n    \"jsonrpc\": \"2.0\",\r\n    \"id\": \"0\"\r\n}\r\n```\r\n\r\n\r\n**Basic example 3: get full block information**\r\n\r\n```python\r\nimport requests\r\nimport json\r\n\r\ndef main():\r\n\r\n    # bitmonerod is running on the localhost and port of 18082\r\n    url = \"http://localhost:18081/json_rpc\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    # the block to get\r\n    block_hash = 'd78e2d024532d8d8f9c777e2572623fd0f229d72d9c9c9da3e7cb841a3cb73c6'\r\n\r\n    # bitmonerod' procedure/method to call\r\n    rpc_input = {\r\n           \"method\": \"getblock\",\r\n           \"params\": {\"hash\": block_hash}\r\n    }\r\n\r\n    # add standard rpc values\r\n    rpc_input.update({\"jsonrpc\": \"2.0\", \"id\": \"0\"})\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n        url,\r\n        data=json.dumps(rpc_input),\r\n        headers=headers)\r\n\r\n    # the response will contain binary blob. For some reason\r\n    # python's json encoder will crash trying to parse such\r\n    # response. Thus, its better to remove it from the response.\r\n    response_json_clean = json.loads(\r\n                            \"\\n\".join(filter(\r\n                                lambda l: \"blob\" not in l, response.text.split(\"\\n\")\r\n                            )))\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response_json_clean, indent=4))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nGenerated output:\r\n```python\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"result\": {\r\n        \"block_header\": {\r\n            \"difficulty\": 756932534,\r\n            \"major_version\": 1,\r\n            \"height\": 796743,\r\n            \"prev_hash\": \"dff9c6299c84f945fabde9e96afa5d44f3c8fa88835fb87a965259c46694a2cd\",\r\n            \"depth\": 166,\r\n            \"reward\": 8349972377827,\r\n            \"minor_version\": 0,\r\n            \"timestamp\": 1445741816,\r\n            \"nonce\": 8389,\r\n            \"orphan_status\": false,\r\n            \"hash\": \"d78e2d024532d8d8f9c777e2572623fd0f229d72d9c9c9da3e7cb841a3cb73c6\"\r\n        },\r\n        \"json\": \"{\\n  \\\"major_version\\\": 1, \\n  \\\"minor_version\\\": 0, \\n  \\\"timestamp\\\": 1445741816, \\n  \\\"prev_id\\\": \\\"dff9c6299c84f945fabde9e96afa5d44f3c8fa88835fb87a965259c46694a2cd\\\", \\n  \\\"nonce\\\": 8389, \\n  \\\"miner_tx\\\": {\\n    \\\"version\\\": 1, \\n    \\\"unlock_time\\\": 796803, \\n    \\\"vin\\\": [ {\\n        \\\"gen\\\": {\\n          \\\"height\\\": 796743\\n        }\\n      }\\n    ], \\n    \\\"vout\\\": [ {\\n        \\\"amount\\\": 9972377827, \\n        \\\"target\\\": {\\n          \\\"key\\\": \\\"aecebf2757be84a2d986052607ec3114969f7c9e128a051f5e13f2304287733d\\\"\\n        }\\n      }, {\\n        \\\"amount\\\": 40000000000, \\n        \\\"target\\\": {\\n          \\\"key\\\": \\\"c3a6d449f3fa837edbbc6beac8bc0405c6340c4e39418164b4aa1fa2202573f2\\\"\\n        }\\n      }, {\\n        \\\"amount\\\": 300000000000, \\n        \\\"target\\\": {\\n          \\\"key\\\": \\\"cfce614b779ab2705fc5f94a022eb983a2960ba9da02d61f430e988128236b0a\\\"\\n        }\\n      }, {\\n        \\\"amount\\\": 8000000000000, \\n        \\\"target\\\": {\\n          \\\"key\\\": \\\"b445b474d19ae555e048762e12ac8c406a4a6d7b0f37993dc8dabe7a31ef65b8\\\"\\n        }\\n      }\\n    ], \\n    \\\"extra\\\": [ 1, 243, 56, 214, 120, 176, 255, 133, 1, 251, 134, 27, 135, 49, 198, 55, 249, 146, 222, 116, 48, 103, 249, 229, 195, 120, 162, 127, 62, 35, 57, 231, 51, 2, 8, 0, 0, 0, 0, 25, 79, 41, 47\\n    ], \\n    \\\"signatures\\\": [ ]\\n  }, \\n  \\\"tx_hashes\\\": [ \\\"cc283dcae267c622d685b3e5f8e72aaba807dad0bb2d4170521af57c50be8165\\\", \\\"d2873b1c1800ce04434c663893a16417e8717015e9686914166f7957c5eabd68\\\"\\n  ]\\n}\",\r\n        \"tx_hashes\": [\r\n            \"cc283dcae267c622d685b3e5f8e72aaba807dad0bb2d4170521af57c50be8165\",\r\n            \"d2873b1c1800ce04434c663893a16417e8717015e9686914166f7957c5eabd68\"\r\n        ],\r\n        \"status\": \"OK\"\r\n    },\r\n    \"id\": \"0\"\r\n}\r\n```\r\n\r\n**Basic example 4: get blockchain information**\r\n```python\r\nimport requests\r\nimport json\r\n\r\ndef main():\r\n\r\n    # bitmonerod is running on the localhost and port of 18082\r\n    url = \"http://localhost:18081/json_rpc\"\r\n\r\n    # standard json header\r\n    headers = {'content-type': 'application/json'}\r\n\r\n    # bitmonerod' procedure/method to call\r\n    rpc_input = {\r\n           \"method\": \"get_info\"\r\n    }\r\n\r\n    # add standard rpc values\r\n    rpc_input.update({\"jsonrpc\": \"2.0\", \"id\": \"0\"})\r\n\r\n    # execute the rpc request\r\n    response = requests.post(\r\n        url,\r\n        data=json.dumps(rpc_input),\r\n        headers=headers)\r\n\r\n    # pretty print json output\r\n    print(json.dumps(response.json(), indent=4))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n\r\nGenerated output:\r\n```python\r\n{\r\n    \"jsonrpc\": \"2.0\",\r\n    \"result\": {\r\n        \"status\": \"OK\",\r\n        \"alt_blocks_count\": 0,\r\n        \"difficulty\": 692400878,\r\n        \"height\": 797031,\r\n        \"tx_pool_size\": 1,\r\n        \"grey_peerlist_size\": 3447,\r\n        \"outgoing_connections_count\": 12,\r\n        \"tx_count\": 492488,\r\n        \"white_peerlist_size\": 253,\r\n        \"target_height\": 796995,\r\n        \"incoming_connections_count\": 0\r\n    },\r\n    \"id\": \"0\"\r\n}\r\n```\r\n\r\nMore examples hopefully coming soon.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}